[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "urllib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib",
        "description": "urllib",
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SelectField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "RadioField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "EmailField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "DecimalField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "validators",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SelectField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "RadioField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "EmailField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "DecimalField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "validators",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SelectField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "RadioField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "EmailField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "DecimalField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "RecaptchaField",
        "importPath": "flask_wtf.recaptcha",
        "description": "flask_wtf.recaptcha",
        "isExtraImport": true,
        "detail": "flask_wtf.recaptcha",
        "documentation": {}
    },
    {
        "label": "RecaptchaField",
        "importPath": "flask_wtf.recaptcha",
        "description": "flask_wtf.recaptcha",
        "isExtraImport": true,
        "detail": "flask_wtf.recaptcha",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "g",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "g",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "cross_origin",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CSRFProtect",
        "importPath": "flask_wtf.csrf",
        "description": "flask_wtf.csrf",
        "isExtraImport": true,
        "detail": "flask_wtf.csrf",
        "documentation": {}
    },
    {
        "label": "forms",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "forms",
        "description": "forms",
        "detail": "forms",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "Admin",
        "importPath": "flask_admin",
        "description": "flask_admin",
        "isExtraImport": true,
        "detail": "flask_admin",
        "documentation": {}
    },
    {
        "label": "ModelView",
        "importPath": "flask_admin.contrib.sqla",
        "description": "flask_admin.contrib.sqla",
        "isExtraImport": true,
        "detail": "flask_admin.contrib.sqla",
        "documentation": {}
    },
    {
        "label": "ModelView",
        "importPath": "flask_admin.contrib.sqla",
        "description": "flask_admin.contrib.sqla",
        "isExtraImport": true,
        "detail": "flask_admin.contrib.sqla",
        "documentation": {}
    },
    {
        "label": "Principal",
        "importPath": "flask_principal",
        "description": "flask_principal",
        "isExtraImport": true,
        "detail": "flask_principal",
        "documentation": {}
    },
    {
        "label": "identity_loaded",
        "importPath": "flask_principal",
        "description": "flask_principal",
        "isExtraImport": true,
        "detail": "flask_principal",
        "documentation": {}
    },
    {
        "label": "UserNeed",
        "importPath": "flask_principal",
        "description": "flask_principal",
        "isExtraImport": true,
        "detail": "flask_principal",
        "documentation": {}
    },
    {
        "label": "RoleNeed",
        "importPath": "flask_principal",
        "description": "flask_principal",
        "isExtraImport": true,
        "detail": "flask_principal",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "flask_principal",
        "description": "flask_principal",
        "isExtraImport": true,
        "detail": "flask_principal",
        "documentation": {}
    },
    {
        "label": "Babel",
        "importPath": "flask_babelex",
        "description": "flask_babelex",
        "isExtraImport": true,
        "detail": "flask_babelex",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Usuarios",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Insumo",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Proveedor",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Insumo_Inventario",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Pedidos_Proveedor",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Merma_Inventario",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Receta",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Proveedor",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Proveedor",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Insumo",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Insumo_Inventario",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Pedidos_Proveedor",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MermaInventarioView",
        "importPath": "views",
        "description": "views",
        "isExtraImport": true,
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "Pedidos_ProveedorView",
        "importPath": "views",
        "description": "views",
        "isExtraImport": true,
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "Insumo_InventarioView",
        "importPath": "views",
        "description": "views",
        "isExtraImport": true,
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "DevelopmentConfig",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "TemplateNotFound",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "ProveedorForm",
        "importPath": "proveedorForm",
        "description": "proveedorForm",
        "isExtraImport": true,
        "detail": "proveedorForm",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config(object):\n    SECRET_KEY='Clave_Nueva'\n    SESSION_COOKIE_SECURE=False\n    RECAPTCHA_PUBLIC_KEY = \"6LdoUpQpAAAAAHMJhflBg6gi6L04IfBw82xK5V5_\"\n    RECAPTCHA_PRIVATE_KEY= \"6LdoUpQpAAAAADCpDA8zxCWCF3OsGz3PG-SsoKIe\"\nclass DevelopmentConfig(Config):\n    DEBUG=True\n    SQLALCHEMY_DATABASE_URI='mysql+pymysql://javier:root@localhost/galletosdelight'\n    # SQLALCHEMY_DATABASE_URI='mysql+pymysql://root:root@localhost/galletosdelight'\n    SQLALCHEMY_TRACK_MODIFICATIONS=False",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "DevelopmentConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class DevelopmentConfig(Config):\n    DEBUG=True\n    SQLALCHEMY_DATABASE_URI='mysql+pymysql://javier:root@localhost/galletosdelight'\n    # SQLALCHEMY_DATABASE_URI='mysql+pymysql://root:root@localhost/galletosdelight'\n    SQLALCHEMY_TRACK_MODIFICATIONS=False",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "forms",
        "description": "forms",
        "peekOfCode": "class LoginForm(Form):\n    username = StringField('usuario', [\n        validators.DataRequired(message='el campo es requerido'),\n        validators.length(min=3, max=20, message='ingresa un usuario valido')\n    ])\n    password = PasswordField('contraseña',[\n        validators.DataRequired(message='el campo es requerido'),\n        validators.length(min=3, max=20, message='ingresa una contraseña valida')\n    ])\n    recaptcha = RecaptchaField()",
        "detail": "forms",
        "documentation": {}
    },
    {
        "label": "RegistroForm",
        "kind": 6,
        "importPath": "forms",
        "description": "forms",
        "peekOfCode": "class RegistroForm(Form):\n    nombre = StringField('nombre', [\n        validators.DataRequired(message='el campo es requerido'),\n        validators.length(min=3, max=50, message='ingresa un nombre válido')\n    ])\n    username = StringField('usuario', [\n        validators.DataRequired(message='el campo es requerido'),\n        validators.length(min=3, max=20, message='ingresa un usuario valido')\n    ])\n    password = PasswordField('contraseña',[",
        "detail": "forms",
        "documentation": {}
    },
    {
        "label": "ProductoForm",
        "kind": 6,
        "importPath": "forms",
        "description": "forms",
        "peekOfCode": "class ProductoForm(Form):\n    nombre = StringField('nombre', [\n        validators.DataRequired(message='el campo es requerido'),\n        validators.length(min=3, max=20, message='ingresa un usuario valido')\n    ])\n    precio = DecimalField('precio', [\n        validators.DataRequired(message='el campo es requerido'),\n       validators.number_range(min=0.1, max=99999999, message='valor no valido')\n    ])\n    stock =  IntegerField('stock', [",
        "detail": "forms",
        "documentation": {}
    },
    {
        "label": "get_locale",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_locale():\n        return 'es'\n@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template('404.html'),404\n# Creates a user loader callback that returns the user object given an id\n@login_manager.user_loader\ndef loader_user(id):\n    return Users.query.get(id)\n@app.route(\"/\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "page_not_found",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def page_not_found(e):\n    return render_template('404.html'),404\n# Creates a user loader callback that returns the user object given an id\n@login_manager.user_loader\ndef loader_user(id):\n    return Users.query.get(id)\n@app.route(\"/\")\n@login_required\ndef index():\n    return render_template(\"index.html\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "loader_user",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def loader_user(id):\n    return Users.query.get(id)\n@app.route(\"/\")\n@login_required\ndef index():\n    return render_template(\"index.html\")\n@login_manager.unauthorized_handler\ndef unauthorized():\n    return render_template('401.html'),401\n@app.errorhandler(403)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def index():\n    return render_template(\"index.html\")\n@login_manager.unauthorized_handler\ndef unauthorized():\n    return render_template('401.html'),401\n@app.errorhandler(403)\ndef page_not_found(e):\n    session['redirected_from'] = request.url\n    return render_template('403.html'),403\n@app.before_request",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "unauthorized",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def unauthorized():\n    return render_template('401.html'),401\n@app.errorhandler(403)\ndef page_not_found(e):\n    session['redirected_from'] = request.url\n    return render_template('403.html'),403\n@app.before_request\ndef before_request():\n    verificar_inactividad()\n@app.after_request",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "page_not_found",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def page_not_found(e):\n    session['redirected_from'] = request.url\n    return render_template('403.html'),403\n@app.before_request\ndef before_request():\n    verificar_inactividad()\n@app.after_request\ndef after_request(response):\n    return response\n@identity_loaded.connect_via(app)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "before_request",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def before_request():\n    verificar_inactividad()\n@app.after_request\ndef after_request(response):\n    return response\n@identity_loaded.connect_via(app)\ndef on_identity_loaded(sender, identity):\n    # Set the identity user object\n    identity.user = current_user\n    # Add the UserNeed to the identity",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "after_request",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def after_request(response):\n    return response\n@identity_loaded.connect_via(app)\ndef on_identity_loaded(sender, identity):\n    # Set the identity user object\n    identity.user = current_user\n    # Add the UserNeed to the identity\n    if hasattr(current_user, 'id'):\n        identity.provides.add(UserNeed(current_user.id))\n    # Assuming the User model has a list of roles, update the",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "on_identity_loaded",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def on_identity_loaded(sender, identity):\n    # Set the identity user object\n    identity.user = current_user\n    # Add the UserNeed to the identity\n    if hasattr(current_user, 'id'):\n        identity.provides.add(UserNeed(current_user.id))\n    # Assuming the User model has a list of roles, update the\n    # identity with the roles that the user provides\n    if hasattr(current_user, 'permisos'):\n        if current_user.permisos == 1:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "verificar_inactividad",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def verificar_inactividad():\n    tiempo_actual = time.time()\n    tiempo_inactivo = tiempo_actual - session.get('tiempo', tiempo_actual)\n    umbral_inactividad_segundos = 60\n    if tiempo_inactivo > umbral_inactividad_segundos:\n        session.clear() \n        session.modified = True\n        form=forms.LoginForm()\n        return render_template(\"login.html\", form=form) \n    session['tiempo'] = tiempo_actual",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "password_check",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def password_check(passwd):\n    SpecialSym =['$', '@', '#', '%']\n    val = True\n    mensaje = \"\"\n    if len(passwd) < 9:\n        mensaje=\"la contraseña debe de tener una logitud minima de 9\"\n        val = False\n    if not any(char.isdigit() for char in passwd):\n        mensaje = \"La contraseña debe de tener al menos un numero\"\n        val = False",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "registro",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def registro():\n    mensaje = \"\"\n    form = forms.RegistroForm(request.form)\n    print(form.nombre.data)\n    if request.method == \"POST\" and form.validate() :\n        print(form.nombre.data)\n        nombre = sanitizar(form.nombre.data)\n        username=form.username.data\n        password=form.password.data\n        username = sanitizar(username)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def login():\n    form = forms.LoginForm(request.form)\n    res = \"\"\n    print(\"app.url_map\")\n    print(app.url_map)\n    if request.method == \"POST\":\n        data = request.get_json()\n        res = loginCompare(data[\"user\"], data[\"password\"])\n        if res == \"wronguser\":\n            return jsonify(fail=1)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "loginCompare",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def loginCompare(username, password):\n    username = sanitizar(username)\n    password = sanitizar(password)\n    user = Users.query.filter_by(\n                username=username).first()\n    if \"<\" in user or \">\" in user :\n        return \"usuario con caracteres no validos '<', '>'\"\n    if user is not None:\n        # if user.password == password:\n        if bcrypt.checkpw(password=password.encode('utf-8'),hashed_password=user.password.encode('utf-8')):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "sanitizar",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def sanitizar(palabra):\n    palabra=str(palabra)\n    if \";\" in palabra or \"delete\" in palabra or \"update\" in palabra or \"select\" in palabra or \"'\" in palabra or '\"' in palabra:\n        palabra = palabra.replace(';', '')\n        palabra = palabra.replace('delete', '')\n        palabra = palabra.replace('update', '')\n        palabra = palabra.replace('select', '')\n        palabra = palabra.replace(\"'\", '')\n        palabra = palabra.replace('\"', '')\n    return palabra",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def logout():\n    logout_user()\n    return redirect(url_for(\"home\"))\nif __name__ == \"__main__\":\n    csrf.init_app(app)\n    db.init_app(app)\n    with app.app_context():\n        db.create_all()\n    app.run(host='0.0.0.0',debug=True)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = Flask(__name__)\napp.config.from_object(DevelopmentConfig)\ncsrf=CSRFProtect()\ncors = CORS(app, resources={r\"/*\": {\"origins\": [\"*\"]}})\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\n# load the extension\nprincipals = Principal(app)\n#Flask admin\nadmin = Admin(app, name='Galletos Delight', template_mode='bootstrap4', base_template='custom_master.html')",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "cors",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "cors = CORS(app, resources={r\"/*\": {\"origins\": [\"*\"]}})\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\n# load the extension\nprincipals = Principal(app)\n#Flask admin\nadmin = Admin(app, name='Galletos Delight', template_mode='bootstrap4', base_template='custom_master.html')\n# admin.add_view(ModelView(Proveedor, db.session))\n#Fin flask admin\n# Create a permission with a single Need, in this case a RoleNeed.",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "login_manager = LoginManager()\nlogin_manager.init_app(app)\n# load the extension\nprincipals = Principal(app)\n#Flask admin\nadmin = Admin(app, name='Galletos Delight', template_mode='bootstrap4', base_template='custom_master.html')\n# admin.add_view(ModelView(Proveedor, db.session))\n#Fin flask admin\n# Create a permission with a single Need, in this case a RoleNeed.\nadmin_permission = Permission(RoleNeed('admin'))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "principals",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "principals = Principal(app)\n#Flask admin\nadmin = Admin(app, name='Galletos Delight', template_mode='bootstrap4', base_template='custom_master.html')\n# admin.add_view(ModelView(Proveedor, db.session))\n#Fin flask admin\n# Create a permission with a single Need, in this case a RoleNeed.\nadmin_permission = Permission(RoleNeed('admin'))\n# admin = Admin(app, name='pruebainsumos')\nadmin.add_view(ModelView(Insumo, db.session))\nadmin.add_view(ModelView(Proveedor, db.session))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "admin",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "admin = Admin(app, name='Galletos Delight', template_mode='bootstrap4', base_template='custom_master.html')\n# admin.add_view(ModelView(Proveedor, db.session))\n#Fin flask admin\n# Create a permission with a single Need, in this case a RoleNeed.\nadmin_permission = Permission(RoleNeed('admin'))\n# admin = Admin(app, name='pruebainsumos')\nadmin.add_view(ModelView(Insumo, db.session))\nadmin.add_view(ModelView(Proveedor, db.session))\nadmin.add_view(Insumo_InventarioView(Insumo_Inventario, db.session))\nadmin.add_view(Pedidos_ProveedorView(Pedidos_Proveedor, db.session))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "admin_permission",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "admin_permission = Permission(RoleNeed('admin'))\n# admin = Admin(app, name='pruebainsumos')\nadmin.add_view(ModelView(Insumo, db.session))\nadmin.add_view(ModelView(Proveedor, db.session))\nadmin.add_view(Insumo_InventarioView(Insumo_Inventario, db.session))\nadmin.add_view(Pedidos_ProveedorView(Pedidos_Proveedor, db.session))\nadmin.add_view(MermaInventarioView(Merma_Inventario, db.session))\nadmin.add_view(ModelView(Receta, db.session))\napp.config['SECRET_KEY'] = secrets.token_hex(16)\nsecretkey=app.config['SECRET_KEY']",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app.config['SECRET_KEY']",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app.config['SECRET_KEY'] = secrets.token_hex(16)\nsecretkey=app.config['SECRET_KEY']\n# load the extension\nprincipals = Principal(app)\n# Create a permission with a single Need, in this case a RoleNeed.\nadmin_permission = Permission(RoleNeed('admin'))\n# app.register_blueprint(proveedores)\n#Iniciar traduccion\nbabel = Babel(app)\n@babel.localeselector",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "principals",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "principals = Principal(app)\n# Create a permission with a single Need, in this case a RoleNeed.\nadmin_permission = Permission(RoleNeed('admin'))\n# app.register_blueprint(proveedores)\n#Iniciar traduccion\nbabel = Babel(app)\n@babel.localeselector\ndef get_locale():\n        return 'es'\n@app.errorhandler(404)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "admin_permission",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "admin_permission = Permission(RoleNeed('admin'))\n# app.register_blueprint(proveedores)\n#Iniciar traduccion\nbabel = Babel(app)\n@babel.localeselector\ndef get_locale():\n        return 'es'\n@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template('404.html'),404",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "babel",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "babel = Babel(app)\n@babel.localeselector\ndef get_locale():\n        return 'es'\n@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template('404.html'),404\n# Creates a user loader callback that returns the user object given an id\n@login_manager.user_loader\ndef loader_user(id):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Usuarios",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Usuarios(db.Model):\n    __tablename__='usuarios'\n    id=db.Column(db.Integer,primary_key=True)\n    nombre=db.Column(db.String(50))\n    username=db.Column(db.String(50))\n    password=db.Column(db.String(250))\n    permisos=db.Column(db.Integer)\n    producciones_usuario = relationship(\"Produccion\", back_populates=\"usuario\")\n    ventas_usuario = relationship(\"Venta\", back_populates=\"usuario\")\n    compras_usuario = relationship(\"Compra\", back_populates=\"usuario\")",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Insumo",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Insumo(db.Model):\n    __tablename__='insumo'\n    id=db.Column(db.Integer,primary_key=True)\n    nombre=db.Column(db.String(80))\n    insumo_inventario = relationship(\"Insumo_Inventario\", back_populates=\"insumo\")\n    pedidos_insumo = relationship(\"Pedidos_Proveedor\", back_populates=\"insumo\")\n    insumo_ingredientes = relationship(\"Ingredientes_Receta\", back_populates=\"insumo\")\n    compras = relationship(\"Detalle_Compra\", back_populates=\"insumo\")\n    insumo_merma_produccion = relationship(\"Merma_Produccion\", back_populates=\"insumo\")\n    def __str__(self):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Proveedor",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Proveedor(db.Model):\n    __tablename__='proveedor'\n    id=db.Column(db.Integer, primary_key=True)\n    nombre=db.Column(db.String(80))\n    direccion=db.Column(db.String(90))\n    telefono=db.Column(db.String(10))\n    proveedor_compras = relationship(\"Compra\", back_populates=\"proveedor\")\n    proveedor_inventario = relationship(\"Insumo_Inventario\", back_populates=\"proveedor\")\n    proveedor = db.relationship(\"Pedidos_Proveedor\", back_populates=\"proveedor\")\n    def __str__(self):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Insumo_Inventario",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Insumo_Inventario(db.Model):\n    __tablename__='insumo_inventario'\n    id=db.Column(db.Integer,primary_key=True)\n    cantidad=db.Column(db.Float)\n    anaquel=db.Column(db.String(30))\n    insumo_id = mapped_column(ForeignKey(\"insumo.id\"))\n    insumo = relationship(\"Insumo\", back_populates=\"insumo_inventario\")  \n    proveedor_id = mapped_column(ForeignKey(\"proveedor.id\"))\n    proveedor = relationship(\"Proveedor\", back_populates=\"proveedor_inventario\")  \n    merma_inventario = relationship(\"Merma_Inventario\", back_populates=\"insumo_inventario\")",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Pedidos_Proveedor",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Pedidos_Proveedor(db.Model):\n    __tablename__='pedidos_proveedor'\n    id=db.Column(db.Integer, primary_key=True)\n    cantidad=db.Column(db.Float)\n    precioActual=db.Column(db.Float) \n    periodicidad=db.Column(db.Integer)\n    insumo_id = db.Column(db.Integer, db.ForeignKey(\"insumo.id\")) \n    insumo = relationship(Insumo, back_populates=\"pedidos_insumo\")\n    proveedor_id = db.Column(db.Integer, db.ForeignKey(\"proveedor.id\")) \n    proveedor = db.relationship(Proveedor, back_populates=\"proveedor\")",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Merma_Inventario",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Merma_Inventario(db.Model):\n    __tablename__='merma_inventario'\n    id=db.Column(db.Integer,primary_key=True)\n    cantidad=db.Column(db.Float)\n    insumo_inventario_id = mapped_column(ForeignKey(\"insumo_inventario.id\"))\n    insumo_inventario = relationship(\"Insumo_Inventario\", back_populates=\"merma_inventario\")  \n    descripcion=db.Column(db.String(300))\nclass Receta(db.Model):\n    __tablename__='receta'\n    id=db.Column(db.Integer,primary_key=True)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Receta",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Receta(db.Model):\n    __tablename__='receta'\n    id=db.Column(db.Integer,primary_key=True)\n    nombre=db.Column(db.String(50))\n    descripcion=db.Column(db.String(300))\n    ingredientes_receta = relationship(\"Ingredientes_Receta\", back_populates=\"receta\")\n    producciones = relationship(\"Produccion_Detalle\", back_populates=\"receta\")\n    producto_receta = relationship(\"Producto\", back_populates=\"receta\")\n    def __str__(self):\n        return self.nombre",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Ingredientes_Receta",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Ingredientes_Receta(db.Model):\n    __tablename__='ingredientes_receta'\n    id=db.Column(db.Integer,primary_key=True)\n    cantidad=db.Column(db.Integer)\n    insumo_id = mapped_column(ForeignKey(\"insumo.id\"))\n    insumo = relationship(\"Insumo\", back_populates=\"insumo_ingredientes\")  \n    receta_id = mapped_column(ForeignKey(\"receta.id\"))\n    receta = relationship(\"Receta\", back_populates=\"ingredientes_receta\")  \nclass Produccion(db.Model):\n    __tablename__='produccion'",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Produccion",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Produccion(db.Model):\n    __tablename__='produccion'\n    id=db.Column(db.Integer,primary_key=True)\n    hora=db.Column(db.DateTime,default=datetime.datetime.now)\n    usuario_id = mapped_column(ForeignKey(\"usuarios.id\"))\n    usuario = relationship(\"Usuarios\", back_populates=\"producciones_usuario\")  \n    detalles = relationship(\"Produccion_Detalle\", back_populates=\"produccion\")\nclass Produccion_Detalle(db.Model):\n    __tablename__='produccion_detalle'\n    id=db.Column(db.Integer,primary_key=True)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Produccion_Detalle",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Produccion_Detalle(db.Model):\n    __tablename__='produccion_detalle'\n    id=db.Column(db.Integer,primary_key=True)\n    cantidad=db.Column(db.Float)\n    receta_id = mapped_column(ForeignKey(\"receta.id\"))\n    receta = relationship(\"Receta\", back_populates=\"producciones\")  \n    produccion_id = mapped_column(ForeignKey(\"produccion.id\"))\n    produccion = relationship(\"Produccion\", back_populates=\"detalles\")  \n    mermas = relationship(\"Merma_Produccion\", back_populates=\"detalle_produccion\")  \nclass Merma_Produccion(db.Model):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Merma_Produccion",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Merma_Produccion(db.Model):\n    __tablename__='merma_produccion'\n    id=db.Column(db.Integer,primary_key=True)\n    cantidad=db.Column(db.Float)\n    detalle_produccion_id = mapped_column(ForeignKey(\"produccion_detalle.id\"))\n    detalle_produccion = relationship(\"Produccion_Detalle\", back_populates=\"mermas\")  \n    insumo_id = mapped_column(ForeignKey(\"insumo.id\"))\n    insumo = relationship(\"Insumo\", back_populates=\"insumo_merma_produccion\")  \n    descripcion=db.Column(db.String(300))\nclass Producto(db.Model):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Producto",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Producto(db.Model):\n    __tablename__='producto'\n    id=db.Column(db.Integer,primary_key=True)\n    hora=db.Column(db.DateTime,default=datetime.datetime.now)\n    receta_id = mapped_column(ForeignKey(\"receta.id\"))\n    receta = relationship(\"Receta\", back_populates=\"producto_receta\")  \n    inventario = relationship(\"Producto_Inventario\", back_populates=\"producto\")  \n    merma = relationship(\"Merma_Producto\", back_populates=\"producto\")  \n    orden = relationship(\"Orden\", back_populates=\"producto\")  \n    detalle_venta = relationship(\"Detalle_Venta\", back_populates=\"producto\")",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Producto_Inventario",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Producto_Inventario(db.Model):\n    __tablename__='producto_inventario'\n    id=db.Column(db.Integer,primary_key=True)\n    hora=db.Column(db.DateTime,default=datetime.datetime.now)\n    producto_id = mapped_column(ForeignKey(\"producto.id\"))\n    producto = relationship(\"Producto\", back_populates=\"inventario\")  \n    precio =db.Column(db.Float)\n    peso =db.Column(db.Float)\nclass Merma_Producto(db.Model):\n    __tablename__='merma_producto'",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Merma_Producto",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Merma_Producto(db.Model):\n    __tablename__='merma_producto'\n    id=db.Column(db.Integer,primary_key=True)\n    cantidad=db.Column(db.Float)\n    hora=db.Column(db.DateTime,default=datetime.datetime.now)\n    producto_id = mapped_column(ForeignKey(\"producto.id\"))\n    producto = relationship(\"Producto\", back_populates=\"merma\")  \n    descripcion=db.Column(db.String(300))\nclass Orden(db.Model):\n    __tablename__='orden'",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Orden",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Orden(db.Model):\n    __tablename__='orden'\n    id=db.Column(db.Integer,primary_key=True)\n    cantidad=db.Column(db.Float)\n    hora=db.Column(db.DateTime,default=datetime.datetime.now)\n    producto_id = mapped_column(ForeignKey(\"producto.id\"))\n    producto = relationship(\"Producto\", back_populates=\"orden\")  \n    terminado=db.Column(db.Boolean)\nclass Venta(db.Model):\n    __tablename__='venta'",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Venta",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Venta(db.Model):\n    __tablename__='venta'\n    id=db.Column(db.Integer,primary_key=True)\n    hora=db.Column(db.DateTime,default=datetime.datetime.now)\n    usuario_id = mapped_column(ForeignKey(\"usuarios.id\"))\n    usuario = relationship(\"Usuarios\", back_populates=\"ventas_usuario\")  \n    total_venta =db.Column(db.Float)\nclass Detalle_Venta(db.Model):\n    __tablename__='detalle_venta'\n    id=db.Column(db.Integer,primary_key=True)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Detalle_Venta",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Detalle_Venta(db.Model):\n    __tablename__='detalle_venta'\n    id=db.Column(db.Integer,primary_key=True)\n    producto_id = mapped_column(ForeignKey(\"producto.id\"))\n    producto = relationship(\"Producto\", back_populates=\"detalle_venta\")  \n    subtotal=db.Column(db.Float)\n    cantidad=db.Column(db.Float)\nclass Compra(db.Model):\n    __tablename__='compra'\n    id=db.Column(db.Integer,primary_key=True)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Compra",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Compra(db.Model):\n    __tablename__='compra'\n    id=db.Column(db.Integer,primary_key=True)\n    fecha=db.Column(db.DateTime,default=datetime.datetime.now)\n    usuario_id = mapped_column(ForeignKey(\"usuarios.id\"))\n    usuario = relationship(\"Usuarios\", back_populates=\"compras_usuario\")  \n    proveedor_id = mapped_column(ForeignKey(\"proveedor.id\"))\n    proveedor = relationship(\"Proveedor\", back_populates=\"proveedor_compras\")  \n    detalles_compra = relationship(\"Detalle_Compra\", back_populates=\"compra\")\n    total =db.Column(db.Float)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Detalle_Compra",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Detalle_Compra(db.Model):\n    __tablename__='detalle_compra'\n    id=db.Column(db.Integer,primary_key=True)\n    compra_id = mapped_column(ForeignKey(\"compra.id\"))\n    compra = relationship(\"Compra\", back_populates=\"detalles_compra\")  \n    insumo_id = mapped_column(ForeignKey(\"insumo.id\"))\n    insumo = relationship(\"Insumo\", back_populates=\"compras\")  \n    subtotal=db.Column(db.Float)\n    cantidad=db.Column(db.Float)\nclass Users(UserMixin, Usuarios): ...",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Users",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Users(UserMixin, Usuarios): ...",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "showProveedores",
        "kind": 2,
        "importPath": "proveedores",
        "description": "proveedores",
        "peekOfCode": "def showProveedores():\n    form = ProveedorForm(request.form)\n    prov = db.session.query(Proveedor).all()\n    return render_template('proveedores.html',form=form, proveedores=prov)",
        "detail": "proveedores",
        "documentation": {}
    },
    {
        "label": "proveedores",
        "kind": 5,
        "importPath": "proveedores",
        "description": "proveedores",
        "peekOfCode": "proveedores = Blueprint('proveedores', __name__, template_folder = 'templates')\n@proveedores.route('/proveedores')\ndef showProveedores():\n    form = ProveedorForm(request.form)\n    prov = db.session.query(Proveedor).all()\n    return render_template('proveedores.html',form=form, proveedores=prov)",
        "detail": "proveedores",
        "documentation": {}
    },
    {
        "label": "ProveedorForm",
        "kind": 6,
        "importPath": "proveedorForm",
        "description": "proveedorForm",
        "peekOfCode": "class ProveedorForm(Form):\n    nombre = StringField('Nombre', [\n        validators.DataRequired(message='el campo es requerido'),\n        validators.length(min=1, max=100, message='ingresa un usuario valido')\n    ])\n    direccion = StringField('Direccion',[\n        validators.DataRequired(message='el campo es requerido'),\n        validators.length(min=1, max=100, message='ingresa una contraseña valida')\n    ])\n    telefono = StringField('contraseña',[",
        "detail": "proveedorForm",
        "documentation": {}
    },
    {
        "label": "MermaInventarioView",
        "kind": 6,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "class MermaInventarioView(ModelView):\n    column_list = [ 'cantidad', 'insumo_inventario', 'descripcion']  # Campos a mostrar en la lista\n    column_editable_list = ['cantidad', 'descripcion']  # Campos editables en la lista\n    form_columns = ['cantidad', 'medida', 'insumo_inventario', 'descripcion']  # Campos a mostrar en el formulario de edición\n    form_extra_fields = {\n        'medida': SelectField( choices=[(0, 'Gramos'), (1, 'KG')])\n    }\n    def on_model_change(self, form, model, is_created):\n        if int(model.medida) == 1:\n            model.cantidad = model.cantidad * 1000",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "Pedidos_ProveedorView",
        "kind": 6,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "class Pedidos_ProveedorView(ModelView):\n    column_auto_select_related = True\n    column_list = ['cantidad', 'precioActual', 'periodicidad', 'proveedor', 'insumo' ]  # Campos a mostrar en la lista\n    column_editable_list = ['cantidad', 'precioActual', 'periodicidad']  # Campos editables en la lista\n    form_columns = ['cantidad', 'medida', 'precioActual', 'periodicidad', 'proveedor', 'insumo' ]  # Campos a mostrar en el formulario de edición\n    form_extra_fields = {\n        'medida': SelectField( choices=[(0, 'KG'), (1, 'Gramos')])\n    }\n    def on_model_change(self, form, model, is_created):\n        if is_created:",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "Insumo_InventarioView",
        "kind": 6,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "class Insumo_InventarioView(ModelView):\n    column_auto_select_related = True\n    column_list = ['cantidad', 'anaquel', 'insumo', 'proveedor' ]  # Campos a mostrar en la lista\n    column_editable_list = ['cantidad', 'anaquel', 'insumo', 'proveedor' ] # Campos editables en la lista\n    form_columns = ['cantidad','medida', 'anaquel', 'insumo', 'proveedor' ]  # Campos a mostrar en el formulario de edición\n    form_extra_fields = {\n        'medida': SelectField( choices=[(0, 'KG'), (1, 'Gramos')])\n    }\n    def on_model_change(self, form, model, is_created):\n        if is_created:",
        "detail": "views",
        "documentation": {}
    },
    {
        "label": "RecetaView",
        "kind": 6,
        "importPath": "views",
        "description": "views",
        "peekOfCode": "class RecetaView(ModelView):\n    column_auto_select_related = True\n    form_columns = ['nombre','descripcion', 'anaquel', 'insumo', 'proveedor' ]  # Campos a mostrar en el formulario de edición",
        "detail": "views",
        "documentation": {}
    }
]